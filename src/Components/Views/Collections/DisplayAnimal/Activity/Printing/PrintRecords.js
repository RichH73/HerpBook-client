import React, { Component } from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import * as actionCreators from '../../../../../../actions/index';
import dayjs from 'dayjs';
import _ from 'lodash';

import pdfMake from 'pdfmake/build/pdfmake';
import pdfFonts from 'pdfmake/build/vfs_fonts';
import axios from 'axios';
pdfMake.vfs = pdfFonts.pdfMake.vfs;

class PrintRecords extends Component {
	state = {
		data: '',
		img: '',
	};

	componentDidMount() {
		// const pdfDocGenerator = pdfMake.createPdf(docDefinition);
		//   pdfDocGenerator.getBase64((data) => {
		//     this.setState({data: data});
		//   });
	}

	createPdf = async () => {
		let img = _.get(this, 'props.currentAnimal.images.0');
		//console.log(`${img.URL}/${img.thumbnail}`)
		const proxyurl = 'https://cors-anywhere.herokuapp.com/';

		const getImage = async (url) => {
			const file = await fetch(proxyurl + url);
			//console.log(file)
			const blob = await file.blob();
			const fileReader = new FileReader();
			fileReader.readAsDataURL(blob);
			fileReader.onload = () => {
				const final = `data:image/png;base64,${fileReader.result.split(',')[1]}`;
				console.log(final);
				return final;
			};
		};

		const data = _.get(this, 'props.currentAnimal.feedings').map((d) => {
			return [d.date, d.feederType, d.feederWeight];
		});
		data.unshift(['Date', 'Feeder Type', 'Feeder Amount or Weight']);

		// var dd = {
		//   info: {
		//     title: "Feeding Report",
		//     author: "HerpBook.com",
		//     subject: this.props.currentAnimal._id,
		//   },
		//   footer: function (currentPage, pageCount) {
		//     return currentPage.toString() + " of " + pageCount;
		//   },
		//   header: function (currentPage, pageCount, pageSize) {
		//     // you can apply any logic and return any valid pdfmake element

		//     return [
		//       {
		//         text: "Report generated by HerpBook.com Collections",
		//         link: "https://www.herpbook.com",
		// 		alignment: currentPage % 2 ? "left" : "right",
		// 		fontColor: 'orange'
		//       },
		//       {
		//         canvas: [
		//           { type: "rect", x: 170, y: 32, w: pageSize.width - 170, h: 40 },
		//         ],
		//       },
		//     ];
		//   },
		//   content: [
		//     {
		//      image: this.state.img, // await getImage(`${img.URL}/${img.thumbnail}`),
		//     //   width: 150,
		//     //   alignment: "center",
		//     //   link: "https://www.herpbook.com",
		//     },
		//     {
		//       text: `Feeding report for ${this.props.currentAnimal._id}`,
		//       style: "subheader",
		//     },
		//     {
		//       qr: `https://www.herpbook.com/my_collections?id=${this.props.currentAnimal._id}`,
		//       alignment: "right",
		//       fit: 100,
		//     },
		//     // {
		//     //   text: "Report Generated by HerpBook.com collections",
		//     //   link: "https://www.herpbook.com",
		//     // },
		//     // {
		//     //     text: `Feeding Reccords for ${this.props.currentAnimal._id}`, style: 'header'
		//     // },
		//     {
		//       style: "table",
		//       table: {
		//         body: data,
		//         footer: [{ text: "hello footer" }],
		//       },
		//     },
		//   ],
		//   styles: {
		//     header: {
		//       fontSize: 18,
		//       bold: true,
		//       margin: [0, 0, 0, 10],
		//     },
		//     subheader: {
		//       fontSize: 16,
		//       bold: true,
		//       margin: [0, 10, 0, 5],
		//     },
		//     tableExample: {
		//       margin: [0, 5, 0, 15],
		//     },
		//     tableHeader: {
		//       bold: true,
		//       fontSize: 13,
		//       color: "black",
		//     },
		//   },
		//   defaultStyle: {
		//     // alignment: 'justify'
		//   },
		// };

		const file = await axios
			.get(proxyurl + `${img.URL}/${img.thumbnail}`)
			.then((response) => {
				const blob = new Blob([response.data]);
				console.log('the blob', blob);
				const fileReader = new FileReader();
				fileReader.readAsDataURL(blob);
				fileReader.onload = () => {
					let finalFile = `data:image/jpeg;base64,${fileReader.result.split(',')[1]}`;
					//console.log('reader result', finalFile)
					// this.setState({
					// 	img: finalFile
					// })
					//console.log(this.state.img)

					////

					var dd = {
						info: {
							title: 'Feeding Report',
							author: 'HerpBook.com',
							subject: this.props.currentAnimal._id,
						},
						footer: function (currentPage, pageCount) {
							return currentPage.toString() + ' of ' + pageCount;
						},
						header: function (currentPage, pageCount, pageSize) {
							// you can apply any logic and return any valid pdfmake element

							return [
								{
									text: 'Report generated by HerpBook.com Collections',
									link: 'https://www.herpbook.com',
									alignment: currentPage % 2 ? 'left' : 'right',
									fontColor: 'orange',
								},
								{
									canvas: [{ type: 'rect', x: 170, y: 32, w: pageSize.width - 170, h: 40 }],
								},
							];
						},
						content: [
							{
								image: finalFile, // await getImage(`${img.URL}/${img.thumbnail}`),
								//   width: 150,
								//   alignment: "center",
								//   link: "https://www.herpbook.com",
							},
							{
								text: `Feeding report for ${this.props.currentAnimal._id}`,
								style: 'subheader',
							},
							{
								qr: `https://www.herpbook.com/my_collections?id=${this.props.currentAnimal._id}`,
								alignment: 'right',
								fit: 100,
							},
							// {
							//   text: "Report Generated by HerpBook.com collections",
							//   link: "https://www.herpbook.com",
							// },
							// {
							//     text: `Feeding Reccords for ${this.props.currentAnimal._id}`, style: 'header'
							// },
							{
								style: 'table',
								table: {
									body: data,
									footer: [{ text: 'hello footer' }],
								},
							},
						],
						styles: {
							header: {
								fontSize: 18,
								bold: true,
								margin: [0, 0, 0, 10],
							},
							subheader: {
								fontSize: 16,
								bold: true,
								margin: [0, 10, 0, 5],
							},
							tableExample: {
								margin: [0, 5, 0, 15],
							},
							tableHeader: {
								bold: true,
								fontSize: 13,
								color: 'black',
							},
						},
						defaultStyle: {
							// alignment: 'justify'
						},
					};

					/////

					pdfMake.createPdf(dd).open({}, window.open('', '_blank'));
				};
			})
			.then(() => {
				console.log('this is state', this.state.img);
			});

		//this.setState({img: getImage(`${img.URL}/${img.thumbnail}`)})
		//console.log(this.props.currentAnimal.URL)
		// pdfMake.createPdf(dd).download();
	};

	render() {
		return (
			<div>
				<button onClick={() => this.createPdf()}>Make</button>
			</div>
		);
	}
}

const mapStateToProps = (state) => ({
	API: state.config.server.serverAPI,
	USERSURL: state.config.server.usersURL,
	URL: state.config.server.serverURL,
	userInfo: state.user,
	React: state.config.analytics,
	urlImg: state.bar_img.img,
	currentAnimal: state.viewAnimal,
	selectedAnimalId: state.selectedAnimal.id,
	collectionsIds: state.wholeCollection,
	recordOverlay: state.editRecord,
	notesText: state.richText.text,
	mods: state.richText,
	imgSrc: state.bar_img.img,
});

const mapDispatchToProps = (dispatch) => {
	return bindActionCreators(actionCreators, dispatch);
};

export default connect(mapStateToProps, mapDispatchToProps)(PrintRecords);

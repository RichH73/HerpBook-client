import React, { Component } from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import * as actionCreators from '../../../../../../actions/index';
import dayjs from 'dayjs';
import DatePicker from 'react-datepicker';
import _ from 'lodash';
import './PrintRecords.css';

import pdfMake from 'pdfmake/build/pdfmake';
import pdfFonts from 'pdfmake/build/vfs_fonts';

pdfMake.vfs = pdfFonts.pdfMake.vfs;

class PrintRecords extends Component {
	state = {
		date: new Date(),
		startIsOpen: false,
		endIsOpen: false,
		pdfData: {},
		method: '',
		beginDate: '',
		endDate: '',
	};

	componentDidMount() {}

	setMode = (event) => {
		this.setState({
			method: event.target.value,
		});
	};

	filterData = (data) => {
		const newData = data.filter((d) => {
			return d[0] === '11/19/2020';
		});
		return data;
	};

	makePdf = (image) => {
		const { beginDate, endDate, method } = this.state;
		const pairData = _.get(this, 'props.currentAnimal.pairings')
			.map((p) => {
				return [
					dayjs(p.date).format('MM/DD/YYYY'),
					_.get(p, 'mate', ''),
					_.get(p, 'whitnessed', '') === true ? 'Yes' : 'No',
					_.get(p, 'successful', '') === true ? 'Yes' : 'No',
					_.get(p, 'clutchSize', ''),
					_.get(p, 'infertile', ''),
					_.get(p, 'fertile', ''),
				];
			})
			.filter((p) => {
				return !!beginDate.length ? p[0] === dayjs(beginDate).format('MM/DD/YYYY') : p[0];
			})
			.filter((p) => {
				return !!endDate.length ? p[0] > dayjs(endDate).format('MM/DD/YYYY') : p[0];
			});

		const feedData = _.get(this, 'props.currentAnimal.feedings')
			.map((f) => {
				return [dayjs(f.date).format('MM/DD/YYYY'), _.get(f, 'feederType'), _.get(f, 'feederWeight')];
			})
			.filter((f) => {
				return !!beginDate.length ? f[0] < dayjs(beginDate).format('MM/DD/YYYY') : f;
			})
			.filter((f) => {
				return !!endDate.length ? f[0] < dayjs(endDate).format('MM/DD/YYYY') : f;
			});

		feedData.unshift(['Date', 'Feeder Type', 'Feeder Amount or Weight']);
		pairData.unshift(['Date', 'Mate ID', 'Whitenessed', 'Successful?', 'Clutch Size', 'Infertile#', 'Fertile#']);
		var dd = {
			info: {
				title: 'Feeding Report',
				author: 'HerpBook.com',
				subject: this.props.currentAnimal._id,
			},
			footer: function (currentPage, pageCount) {
				return currentPage.toString() + ' of ' + pageCount + '\n' + dayjs(new Date()).format('MM/DD/YYYY');
			},
			header: function (currentPage, pageCount, pageSize) {
				// you can apply any logic and return any valid pdfmake element

				return [
					{
						text: 'Report generated by HerpBook.com Collections',
						link: 'https://www.herpbook.com',
						alignment: 'right',
						color: 'orange',
					},
					{
						canvas: [{ type: 'rect', x: 170, y: 32, w: pageSize.width - 170, h: 40 }],
					},
				];
			},
			content: [
				{
					text: `Records for animal ID: ${this.props.currentAnimal._id}`,
					fontSize: '18',
					alignment: 'center',
					fontStyle: 'bold',
					style: 'header',
					margin: [0, 0, 0, 30],
				},
				{
					alignment: 'justify',
					columns: [
						{
							image: image,
							width: 150,
							alignment: 'center',
							link: `https://www.herpbook.com/search_collections/${this.props.currentAnimal._id}`,
							margin: [0, 5],
						},
						{
							qr: `https://www.herpbook.com/search_collections/${this.props.currentAnimal._id}`,
							alignment: 'right',
							fit: 100,
						},
					],
				},
				{
					text: `Feeding Records`,
					style: 'subheader',
				},
				{
					style: 'table',
					table: {
						body: feedData,
					},
				},
				{
					text: `Pairing Records`,
					style: 'subheader',
				},
				{
					style: 'table',
					table: {
						body: this.filterData(pairData),
					},
				},
			],
			styles: {
				header: {
					fontSize: 18,
					bold: true,
					margin: [0, 0, 0, 10],
				},
				subheader: {
					fontSize: 16,
					bold: true,
					margin: [0, 10, 0, 5],
				},
				tableexample: {
					margin: [0, 5, 0, 15],
				},
				tableHeader: {
					bold: true,
					fontSize: 13,
					color: 'black',
				},
			},
			defaultStyle: {
				// alignment: 'justify'
			},
		};

		switch (method) {
			case 'DL':
				pdfMake.createPdf(dd).download();
				break;
			case 'VW':
				const pdfDocGenerator = pdfMake.createPdf(dd);
				pdfDocGenerator.getBase64((pdfData) => {
					this.setState({ pdfData: `data:application/pdf;base64,${pdfData}` });
				});
				break;
			case 'PR':
				pdfMake.createPdf(dd).print();
				break;
			default:
				const pdfGenerator = pdfMake.createPdf(dd);
				pdfGenerator.getBase64((pdfData) => {
					this.setState({ pdfData: `data:application/pdf;base64,${pdfData}` });
				});
				return;
		}
		//   pdfMake.createPdf(dd).open({}, window.open('', '_blank'));
	};

	getImage = async () => {
		const img = _.get(this, 'props.currentAnimal.images.0');
		const proxyurl = 'https://cors-anywhere.herokuapp.com/';
		const file = await fetch(proxyurl + `${img.URL}/${img.thumbnail}`);
		const blob = await file.blob();
		const fileReader = new FileReader();
		fileReader.readAsDataURL(blob);
		fileReader.onload = () => {
			this.makePdf(fileReader.result);
		};
	};

	selectDateRange = (event) => {
		this.setState({
			viewByDateRange: event.target.value === 'true' ? true : false,
		});
	};

	startDateHandleDate = (date) => {
		this.setState({
			beginDate: date,
		});
	};
	endDateHandleDate = (date) => {
		this.setState({
			endDate: date,
		});
	};

	render() {
		const monthMap = {
			'1': 'Jan',
			'2': 'Feb',
			'3': 'Mar',
			'4': 'Apr',
			'5': 'May',
			'6': 'Jun',
			'7': 'Jul',
			'8': 'Aug',
			'9': 'Sep',
			'10': 'Oct',
			'11': 'Nov',
			'12': 'Dec',
		};

		const dateConfig = {
			month: {
				format: (value) => monthMap[value.getMonth() + 1],
				caption: 'Mon',
				step: 1,
			},
			date: {
				format: 'DD',
				caption: 'Day',
				step: 1,
			},
			year: {
				format: 'YYYY',
				caption: 'Year',
				step: 1,
			},
		};

		const sd = dayjs(_.get(this, 'state.startTime'));
		const ed = dayjs(_.get(this, 'state.endTime'));
		return (
			<div className="collections-create-report-body">
				<div className="collections-create-report-form">
					<div className="collections-create-report-date-range-start">
						<label>Start Date: </label>
						<div className="collections-feedings-new-feeding-date-desktop-selector">
							<DatePicker showPopperArrow={false} selected={this.state.beginDate} onChange={(date) => this.startDateHandleDate(date)} />
						</div>
					</div>
					<div className="collections-create-report-date-range-end">
						<label>End Date: </label>
						<div className="collections-feedings-new-feeding-date-desktop-selector">
							<DatePicker showPopperArrow={false} selected={this.state.endDate} onChange={(date) => this.endDateHandleDate(date)} />
						</div>
					</div>
					<div className="collections-create-report-form-method">
						<label>View or print: </label>
						<select onChange={this.setMode}>
							<option value="DL">Download</option>
							<option value="PR">Print</option>
							<option selected value="VW">
								View
							</option>
						</select>
					</div>
					<div className="collections-create-report-form-buttons">
						<button className="button" onClick={() => this.getImage()}>
							Generate
						</button>
					</div>
				</div>

				<div>{!!this.state.pdfData.length ? <object data={this.state.pdfData} width="100%" height="800px" /> : ''}</div>
			</div>
		);
	}
}

const mapStateToProps = (state) => ({
	API: state.config.server.serverAPI,
	USERSURL: state.config.server.usersURL,
	URL: state.config.server.serverURL,
	userInfo: state.user,
	React: state.config.analytics,
	urlImg: state.bar_img.img,
	currentAnimal: state.viewAnimal,
	selectedAnimalId: state.selectedAnimal.id,
	collectionsIds: state.wholeCollection,
	recordOverlay: state.editRecord,
	notesText: state.richText.text,
	mods: state.richText,
	imgSrc: state.bar_img.img,
});

const mapDispatchToProps = (dispatch) => {
	return bindActionCreators(actionCreators, dispatch);
};

export default connect(mapStateToProps, mapDispatchToProps)(PrintRecords);

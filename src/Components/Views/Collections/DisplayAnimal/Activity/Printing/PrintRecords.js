import React, { Component } from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import * as actionCreators from '../../../../../../actions/index';
import dayjs from 'dayjs';
import _ from 'lodash';
import './PrintRecords.css';
import axios from 'axios';

import pdfMake from 'pdfmake/build/pdfmake';
import pdfFonts from 'pdfmake/build/vfs_fonts';

//Bootstrap imports
import Form from 'react-bootstrap/Form';
import Button from 'react-bootstrap/Button';
import Col from 'react-bootstrap/Col';

pdfMake.vfs = pdfFonts.pdfMake.vfs;

class PrintRecords extends Component {
	state = {
		date: new Date(),
		pdfData: {},
		method: 'VW',
		recordsAmount: '',
		startDate: '',
		stopDate: '',
		displayFeed: true,
		displayPair: true,
		displayShed: true,
		displayWeight: true,
	};

	feedSwitch = () => {
		if (!!this.state.displayFeed) {
			this.setState({
				displayFeed: false,
			});
		}
		if (!this.state.displayFeed) {
			this.setState({
				displayFeed: true,
			});
		}
	};

	pairSwitch = () => {
		if (!!this.state.displayPair) {
			this.setState({
				displayPair: false,
			});
		}
		if (!this.state.displayPair) {
			this.setState({
				displayPair: true,
			});
		}
	};

	shedSwitch = () => {
		if (!!this.state.displayShed) {
			this.setState({
				displayShed: false,
			});
		}
		if (!this.state.displayShed) {
			this.setState({
				displayShed: true,
			});
		}
	};

	weightSwitch = () => {
		if (!!this.state.displayWeight) {
			this.setState({
				displayWeight: false,
			});
		}
		if (!this.state.displayWeight) {
			this.setState({
				displayWeight: true,
			});
		}
	};

	resetFilters = () => {
		this.setState({
			recordsAmount: '',
			startDate: '',
			stopDate: '',
			method: 'VW',
			displayFeed: true,
			displayPair: true,
			displayShed: true,
			displayWeight: true,
		});
	};

	componentDidMount() {}

	setMode = (event) => {
		this.setState({
			method: event.target.value,
		});
	};

	makePdf = (image) => {
		const { method } = this.state;
		var dd = {
			info: {
				title: 'Feeding Report',
				author: 'HerpBook.com',
				subject: this.props.currentAnimal._id,
			},
			footer: function (currentPage, pageCount) {
				return currentPage.toString() + ' of ' + pageCount + '\n' + dayjs(new Date()).format('MM/DD/YYYY');
			},
			header: function (currentPage, pageCount, pageSize) {
				return [
					{
						text: 'Report generated by HerpBook.com Collections',
						link: 'https://www.herpbook.com',
						alignment: 'right',
						color: 'orange',
					},
					{
						canvas: [{ type: 'rect', x: 170, y: 32, w: pageSize.width - 170, h: 40 }],
					},
				];
			},
			content: [
				{
					text: `Records for animal ID: ${this.props.currentAnimal._id}`,
					fontSize: '18',
					alignment: 'center',
					fontStyle: 'bold',
					style: 'header',
					margin: [0, 0, 0, 30],
				},
				{
					alignment: 'justify',
					columns: [
						{
							image: image,
							width: 150,
							alignment: 'center',
							link: `https://www.herpbook.com/search_collections/${this.props.currentAnimal._id}`,
							margin: [0, 5],
						},
						{
							qr: `https://www.herpbook.com/search_collections/${this.props.currentAnimal._id}`,
							alignment: 'right',
							fit: 100,
						},
					],
				},
				!!this.props.currentAnimal.feedings.length && this.state.displayFeed ? { text: `Feeding Records`, style: 'subheader' } : '',
				!!this.props.currentAnimal.feedings.length && this.state.displayFeed ? { style: 'table', table: { body: this.getFeedData() } } : '',

				!!this.props.currentAnimal.pairings.length && this.state.displayPair ? { text: `Pairing Records`, style: 'subheader' } : '',
				!!this.props.currentAnimal.pairings.length && this.state.displayPair ? { style: 'table', table: { body: this.getPairData() } } : '',

				!!this.props.currentAnimal.sheddings.length && this.state.displayShed ? { text: `Shed Records`, style: 'subheader' } : '',
				!!this.props.currentAnimal.sheddings.length && this.state.displayShed ? { style: 'table', table: { body: this.getShedData() } } : '',

				!!this.props.currentAnimal.weights.length && this.state.displayWeight ? { text: `Weight Records`, style: 'subheader' } : '',
				!!this.props.currentAnimal.weights.length && this.state.displayWeight ? { style: 'table', table: { body: this.getWeightData() } } : '',
			],
			styles: {
				header: {
					fontSize: 18,
					bold: true,
					margin: [0, 0, 0, 10],
				},
				subheader: {
					fontSize: 16,
					bold: true,
					margin: [0, 10, 0, 5],
				},
				tableexample: {
					margin: [0, 5, 0, 15],
				},
				tableHeader: {
					bold: true,
					fontSize: 13,
					color: 'black',
				},
			},
			defaultStyle: {},
		};

		switch (method) {
			case 'DL':
				pdfMake.createPdf(dd).download();
				break;
			case 'VW':
				const pdfDocGenerator = pdfMake.createPdf(dd);
				pdfDocGenerator.getBase64((pdfData) => {
					this.setState({ pdfData: `data:application/pdf;base64,${pdfData}` });
				});
				break;
			case 'PR':
				pdfMake.createPdf(dd).print();
				break;
			default:
				const pdfGenerator = pdfMake.createPdf(dd);
				pdfGenerator.getBase64((pdfData) => {
					this.setState({ pdfData: `data:application/pdf;base64,${pdfData}` });
				});
				return;
		}
	};

	getImage = async () => {
		const imgDat = await axios({
			url: `${this.props.API}/collections/report_image`,
			method: 'post',
			data: {
				collectionID: _.get(this, 'props.currentAnimal._id'),
			},
		}).then((data) => {
			return data.data;
		});
		this.makePdf(`data:image/jpeg;base64, ${imgDat}`);
	};

	dateHandler = (event) => {
		this.setState({ [event.target.name]: dayjs(event.target.value).format('YYYY-MM-DD') });
	};

	getFeedData = () => {
		let animal = this.props.currentAnimal;
		const recordTypes = ['feedings', 'pairings', 'weights', 'sheddings'];
		let feedRecords = animal.feedings;
		if (!!this.state.recordsAmount) {
			let totalFeedings = feedRecords.length;
			let getLastRecords = totalFeedings - this.state.recordsAmount;
			if (getLastRecords < 0) {
				getLastRecords = 0;
			}
			feedRecords = feedRecords.slice(getLastRecords, totalFeedings);
		}

		if (!!this.state.startDate) {
			feedRecords = feedRecords.filter((record) => {
				console.log(dayjs(record.date).format('YYYY-MM-DD'), dayjs(this.state.startDate).format('YYYY-MM-DD'));
				if (dayjs(record.date).format('YYYY-MM-DD') > dayjs(this.state.startDate).format('YYYY-MM-DD')) {
					return record;
				}
			});
		}

		if (!!this.state.stopDate) {
			feedRecords = feedRecords.filter((record) => {
				console.log(dayjs(record.date).format('YYYY-MM-DD'), dayjs(this.state.stopDate).format('YYYY-MM-DD'));
				if (dayjs(record.date).format('YYYY-MM-DD') < dayjs(this.state.stopDate).format('YYYY-MM-DD')) {
					return record;
				}
			});
		}

		let feedMap = feedRecords.map((f) => {
			return [dayjs(f.date).format('MM/DD/YYYY'), _.get(f, 'feederType'), _.get(f, 'feederWeight')];
		});

		feedMap.unshift(['Date', 'Feeder Type', 'Feeder Amount or Weight']);

		return feedMap;
	};

	getPairData = () => {
		let animal = this.props.currentAnimal;
		let pairRecords = animal.pairings;
		if (!!this.state.recordsAmount) {
			let totalPairings = pairRecords.length;
			let getLastRecords = totalPairings - this.state.recordsAmount;
			if (getLastRecords < 0) {
				getLastRecords = 0;
			}
			pairRecords = pairRecords.slice(getLastRecords, totalPairings);
		}

		if (!!this.state.startDate) {
			pairRecords = pairRecords.filter((record) => {
				if (dayjs(record.date).format('YYYY-MM-DD') > dayjs(this.state.startDate).format('YYYY-MM-DD')) {
					return record;
				}
			});
		}

		if (!!this.state.stopDate) {
			pairRecords = pairRecords.filter((record) => {
				if (dayjs(record.date).format('YYYY-MM-DD') < dayjs(this.state.stopDate).format('YYYY-MM-DD')) {
					return record;
				}
			});
		}

		let pairMap = pairRecords.map((p) => {
			return [
				dayjs(p.date).format('MM/DD/YYYY'),
				_.get(p, 'mate', ''),
				_.get(p, 'whitnessed', '') === true ? 'Yes' : 'No',
				_.get(p, 'successful', '') === true ? 'Yes' : 'No',
				_.get(p, 'clutchSize', ''),
				_.get(p, 'infertile', ''),
				_.get(p, 'fertile', ''),
			];
		});

		pairMap.unshift(['Date', 'Mate ID', 'Whitenessed', 'Successful?', 'Clutch Size', 'Infertile#', 'Fertile#']);

		return pairMap;
	};

	getShedData = () => {
		let animal = this.props.currentAnimal;
		let shedRecords = animal.sheddings;
		if (!!this.state.recordsAmount) {
			let totalSheddings = shedRecords.length;
			let getLastRecords = totalSheddings - this.state.recordsAmount;
			if (getLastRecords < 0) {
				getLastRecords = 0;
			}
			shedRecords = shedRecords.slice(getLastRecords, totalSheddings);
		}

		if (!!this.state.startDate) {
			shedRecords = shedRecords.filter((record) => {
				console.log(dayjs(record.date).format('YYYY-MM-DD'), dayjs(this.state.startDate).format('YYYY-MM-DD'));
				if (dayjs(record.date).format('YYYY-MM-DD') > dayjs(this.state.startDate).format('YYYY-MM-DD')) {
					return record;
				}
			});
		}

		if (!!this.state.stopDate) {
			shedRecords = shedRecords.filter((record) => {
				console.log(dayjs(record.date).format('YYYY-MM-DD'), dayjs(this.state.stopDate).format('YYYY-MM-DD'));
				if (dayjs(record.date).format('YYYY-MM-DD') < dayjs(this.state.stopDate).format('YYYY-MM-DD')) {
					return record;
				}
			});
		}

		let shedMap = shedRecords.map((s) => {
			return [dayjs(s.date).format('MM/DD/YYYY'), _.get(s, 'fullShed') === true ? 'Yes' : 'No'];
		});

		shedMap.unshift(['Date', 'Complete Shed']);

		return shedMap;
	};

	getWeightData = () => {
		let animal = this.props.currentAnimal;
		let weightRecords = animal.weights;
		if (!!this.state.recordsAmount) {
			let totalWeights = weightRecords.length;
			let getLastRecords = totalWeights - this.state.recordsAmount;
			if (getLastRecords < 0) {
				getLastRecords = 0;
			}
			weightRecords = weightRecords.slice(getLastRecords, totalWeights);
		}

		if (!!this.state.startDate) {
			weightRecords = weightRecords.filter((record) => {
				console.log(dayjs(record.date).format('YYYY-MM-DD'), dayjs(this.state.startDate).format('YYYY-MM-DD'));
				if (dayjs(record.date).format('YYYY-MM-DD') > dayjs(this.state.startDate).format('YYYY-MM-DD')) {
					return record;
				}
			});
		}

		if (!!this.state.stopDate) {
			weightRecords = weightRecords.filter((record) => {
				if (dayjs(record.date).format('YYYY-MM-DD') < dayjs(this.state.stopDate).format('YYYY-MM-DD')) {
					return record;
				}
			});
		}

		let weightMap = weightRecords.map((w) => {
			return [dayjs(w.date).format('MM/DD/YYYY'), `${_.get(w, 'weight')}${_.get(w, 'weightUnit')}`];
		});

		weightMap.unshift(['Date', 'Weight']);

		return weightMap;
	};

	onChangeHandler = (event) => {
		this.setState({
			[event.target.name]: event.target.value,
		});
	};

	render() {
		const styles = {
			margin: 'auto 2em',
		};
		return (
			<div className="collections-create-report-body">
				<div className="collections-create-report-form">
					<p>
						You can view, print or download a pdf copy of this animals records by selecting an option from the dropdown menu then click Generate. You
						can also filter the records printed by selecting from any of the filters.
					</p>
					<div className="collections-create-report-form-method">
						<Form>
							<p>Which records would you like to include?</p>
							<Form.Row>
								<Form.Group as={Col}>
									<Form.Check name="displayFeed" checked={this.state.displayFeed} label="Feeding" onChange={this.feedSwitch} style={styles} />
								</Form.Group>
								<Form.Group as={Col}>
									<Form.Check name="displayPair" checked={this.state.displayPair} label="Pairing" onChange={this.pairSwitch} style={styles} />
								</Form.Group>
							</Form.Row>

							<Form.Row>
								<Form.Group as={Col}>
									<Form.Check name="displayShed" checked={this.state.displayShed} label="Shedding" onChange={this.shedSwitch} style={styles} />
								</Form.Group>
								<Form.Group as={Col}>
									<Form.Check name="displayWeight" checked={this.state.displayWeight} label="Weight" onChange={this.weightSwitch} style={styles} />
								</Form.Group>
							</Form.Row>
							<Form.Row>
								<Form.Group as={Col}>
									<Form.Label>View, print or download</Form.Label>
									<Form.Control as="select" value={this.state.method} onChange={this.setMode}>
										<option value="DL">Download</option>
										<option value="PR">Print</option>
										<option selected value="VW">
											View
										</option>
									</Form.Control>
								</Form.Group>

								<Form.Group as={Col}>
									<Form.Label>Amount of records to print</Form.Label>
									<Form.Control type="number" name="recordsAmount" value={this.state.recordsAmount} onChange={this.onChangeHandler} />
								</Form.Group>
							</Form.Row>
							<Form.Row>
								<Form.Group as={Col}>
									<Form.Label>Start Date</Form.Label>
									<Form.Control type="date" name="startDate" value={this.state.startDate} onChange={this.dateHandler} />
								</Form.Group>
								<Form.Group as={Col}>
									<Form.Label>Start Date</Form.Label>
									<Form.Control type="date" name="stopDate" value={this.state.stopDate} onChange={this.dateHandler} />
								</Form.Group>
							</Form.Row>
						</Form>
						<div>
							<Button name="generate" onClick={() => this.getImage()}>
								Generate
							</Button>{' '}
							<Button name="reset" variant="success" onClick={this.resetFilters}>
								Reset
							</Button>
						</div>
					</div>
				</div>
				{/* //TODO check this for warning without eslint line. */}
				{/* eslint-disable-next-line */}
				<div>{!!this.state.pdfData.length ? <object data={this.state.pdfData} width="100%" height="800px" /> : ''}</div>
			</div>
		);
	}
}

const mapStateToProps = (state) => ({
	API: state.config.server.serverAPI,
	USERSURL: state.config.server.usersURL,
	URL: state.config.server.serverURL,
	userInfo: state.user,
	React: state.config.analytics,
	urlImg: state.bar_img.img,
	currentAnimal: state.viewAnimal,
	selectedAnimalId: state.selectedAnimal.id,
	collectionsIds: state.myCollections,
	recordOverlay: state.editRecord,
	notesText: state.richText.text,
	mods: state.richText,
	imgSrc: state.bar_img.img,
	userInfo: state.user,
});

const mapDispatchToProps = (dispatch) => {
	return bindActionCreators(actionCreators, dispatch);
};

export default connect(mapStateToProps, mapDispatchToProps)(PrintRecords);
